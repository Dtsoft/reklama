

/*
 *
 * dig
 *
 * created with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : dig
 * Date                : 06.03.2016
 * Font size in bytes  : 892
 * Font width          : 7
 * Font height         : 11
 * Font first char     : 42
 * Font last char      : 59
 * Font used chars     : 17
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#include <inttypes.h>
#include <avr/pgmspace.h>

#ifndef DIG_H
#define DIG_H

#define DIG_WIDTH 7
#define DIG_HEIGHT 11

static const uint8_t dig[] PROGMEM = {
    0x03, 0x7C, // size
    0x07, // width
    0x0B, // height
    0x2A, // first char
    0x11, // char count
    
    // char widths
    0x03, 0x06, 0x02, 0x03, 0x02, 0x03, 0x06, 0x04, 0x06, 0x06, 
    0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 
    
    // font data
    0x02, 0x05, 0x02, 0x00, 0x00, 0x00, // 42
    0x10, 0x10, 0x7C, 0x7C, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 43
    0x80, 0x80, 0xA0, 0x60, // 44
    0x40, 0x40, 0x40, 0x00, 0x00, 0x00, // 45
    0x00, 0x00, 0x00, 0x00, // 46
    0x80, 0x7C, 0x03, 0x20, 0x00, 0x00, // 47
    0xFE, 0xFF, 0x01, 0x01, 0xFF, 0xFE, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, // 48
    0x0C, 0x06, 0xFF, 0xFF, 0x00, 0x00, 0x20, 0x20, // 49
    0x82, 0xC3, 0x61, 0x31, 0x1F, 0x0E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 50
    0x82, 0x83, 0x09, 0x09, 0xFF, 0xF6, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, // 51
    0x60, 0x58, 0x46, 0xFF, 0xFF, 0x40, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, // 52
    0x9C, 0x9F, 0x0B, 0x09, 0xF9, 0xF1, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, // 53
    0xFC, 0xFE, 0x09, 0x09, 0xFB, 0xF2, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, // 54
    0x01, 0xC1, 0xF1, 0x3D, 0x0F, 0x03, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, // 55
    0xEE, 0xFF, 0x11, 0x11, 0xFF, 0xEE, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, // 56
    0x9E, 0xBF, 0x21, 0x21, 0xFF, 0x7E, 0x00, 0x20, 0x20, 0x20, 0x00, 0x00, // 57
    0x8C, 0x8C, 0x20, 0x20 // 58
    
};

#endif
